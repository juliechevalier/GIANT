<tool name="Heatmap plot" id="heatmap_clustering">
  <description>Generate heatmap from expression file or/and diff.exp. analysis output.</description>
  <code file="General_functions.py"/>
  <requirements>
    <requirement type="package" version="4.5.6">r-plotly</requirement>
  </requirements>
  <stdio>
    <regex match="Execution halted"
           source="both"
           level="fatal"
           description="Execution halted." />
    <regex match="Error in"
           source="both"
           level="fatal"
           description="An undefined error occurred, please check your input carefully and contact your administrator." />
    <regex match="Fatal error"
           source="both"
           level="fatal"
           description="An undefined error occurred, please check your input carefully and contact your administrator." />
  </stdio>
  <command>	<![CDATA[

      #if $dataToCluster.dataToCluster_selector=="expression" and $dataToCluster.expressionData:
        cp $dataToCluster.expressionData ./filteredExpressionData;
      #end if
      #if $dataToCluster.dataToCluster_selector=="expression" and $dataToCluster.filtering_step.filtering_step_selector!="no" and $dataToCluster.filtering_step.select_filtering.filtering_stepBis_selector=="diffExpParam" and $dataToCluster.filtering_step.select_filtering.differentialAnalysis:
        cp  ${dataToCluster.filtering_step.select_filtering.differentialAnalysis} ./filteredDifferentialAnalysis;
      #end if
      #if $dataToCluster.dataToCluster_selector=="foldChange" and $dataToCluster.differentialAnalysis:
        cp $dataToCluster.differentialAnalysis ./filteredDifferentialAnalysis;
      #end if

	   Rscript '/data/galaxy-dist/tools/jimmytools/heatMapClustering.R' -l '$log' -o '$outputData' -f '$advSection.imageFormat' -n '$advSection.clusterNumber' -m '$advSection.maxSampleToPlot'
      #if $advSection.clusterConditions=="true":
     -s 
      #end if
      #if $advSection.select_color.specifyColors=="true":
      -k '$advSection.select_color.featureMin_color,$advSection.select_color.featureMedium_color,$advSection.select_color.featureMax_color'
      #end if
      #if $dataToCluster.dataToCluster_selector=="expression":
      -i './filteredExpressionData'
        #if $dataToCluster.filtering_step.filtering_step_selector!="no":
          -r '$dataToCluster.filtering_step.filtering_step_selector'
          #if $dataToCluster.filtering_step.select_filtering.filtering_stepBis_selector=="diffExpParam":
            -d './filteredDifferentialAnalysis'
            -c '$dataToCluster.filtering_step.select_filtering.comparisonsToInclude'
            -p '$dataToCluster.filtering_step.select_filtering.FCthreshold'
            -t '$dataToCluster.filtering_step.select_filtering.pvalThreshold'
          #else:
            -e '$dataToCluster.filtering_step.select_filtering.geneListFile'
          #end if
        #end if
      #else
       -d './filteredDifferentialAnalysis'
       -c '$dataToCluster.comparisonsToInclude'
        #if $dataToCluster.filtering_step.filtering_step_selector!="no":
          -r '$dataToCluster.filtering_step.filtering_step_selector'
          #if $dataToCluster.filtering_step.select_filtering.filtering_stepBis_selector=="diffExpParam":
            -p '$dataToCluster.filtering_step.select_filtering.FCthreshold'
            -t '$dataToCluster.filtering_step.select_filtering.pvalThreshold'
          #else:
            -e '$dataToCluster.filtering_step.select_filtering.geneListFile'
          #end if
        #end if
      #end if
	   ;
       bash $scriptTransfer;
	]]>
  </command>
<inputs>
  <param type="text" name="title" value="Heatmap_toPersonalize" label="Title for output WITHOUT SPACE!"/>

  <conditional name="dataToCluster">
    <param name="dataToCluster_selector" type="select" label="On which information clustering is made">
        <option value="expression" selected="True">Expression data</option>
        <option value="foldChange">Diff. exp analysis results</option>
    </param>
    <when value="expression">

      <param type="data" name="expressionData" format="tabular" label="Normalized expression tabular file" multiple="false"/>


      <conditional name="filtering_step">
        <param name="filtering_step_selector" type="select" label="Probes/genes filtering">
            <option value="no" selected="True">No filtering</option>
            <option value="input">Filter input probes/genes before clustering</option>
            <option value="output">Filter probes/genes after clustering (for tabular output)</option>
        </param>
        <when value="input">
          <conditional name="select_filtering">
            <param name="filtering_stepBis_selector" type="select" label="Filter">
              <option value="diffExpParam" selected="True">Based on diff. exp. parameters (FC and p-val)</option>
              <option value="geneList">From list of genes</option>
            </param>
            <when value="diffExpParam">
              <param type="data" name="differentialAnalysis" format="tabular" label="Differential analysis tabular file (as given by LIMMA diff.exp. tool)" optional="false" multiple="false">
              </param>

              <param name="comparisonsToInclude" type="select" optional="false" multiple="true" label="Select comparisons to use for filtering" refresh_on_change="true"  dynamic_options="get_column_names_filteredList(select_filtering['differentialAnalysis'].file_name,[0,1],4)">
                 <validator type="empty_field" message="You should specify one factor"></validator>
              </param>

              <param name="FCthreshold" type="float" value="2" label="Fold change threshold for input (both 'threshold' and '1/threshold' values will be used)" help="Minimum value is 1 (ie. all probes/genes are kept)" >
                <validator type="in_range" min="1" exclude_min="False" message="Threshold should be greater than 1"/>
              </param>
              <param name="pvalThreshold" type="float" value="0.05" label="FDR p-val threshold for input" help="When several comparisons are selected a conservative rule is applied (see details below)" >
                <validator type="in_range" min="0" max="1" message="Threshold should be between 0 and 1"/>
              </param>
            </when>
            <when value="geneList">
              <param type="data" name="geneListFile" label="List of genes to keep" multiple="false" help="Gene names should be the same as written in expression file"/>
            </when>
          </conditional>
        </when>
        
        <when value="output">
          <conditional name="select_filtering">
            <param name="filtering_stepBis_selector" type="select" label="Filter">
              <option value="diffExpParam" selected="True">Based on diff. exp. parameters (FC and p-val)</option>
              <option value="geneList">From list of genes</option>
            </param>
            <when value="diffExpParam">
              <param type="data" name="differentialAnalysis" format="tabular" label="Differential analysis tabular file (as given by LIMMA diff.exp. tool)" optional="false" multiple="false">
              </param>

              <param name="comparisonsToInclude" type="select" optional="false" multiple="true" label="Select comparisons to use for filtering" refresh_on_change="true"  dynamic_options="get_column_names_filteredList(select_filtering['differentialAnalysis'].file_name,[0,1],4)">
                 <validator type="empty_field" message="You should specify one factor"></validator>
              </param>

              <param name="FCthreshold" type="float" value="2" label="Fold change threshold for output (both 'threshold' and '1/threshold' values will be used)" help="Minimum value is 1 (ie. all probes/genes are kept)" >
                 <validator type="in_range" min="1" exclude_min="False" message="Threshold should be greater than 1"/>
              </param>
              <param name="pvalThreshold" type="float" value="0.05" label="FDR p-val threshold for output" help="When several comparisons are selected a conservative rule is applied (see details below)">
                    <validator type="in_range" min="0" max="1" message="Threshold should be between 0 and 1"/>
              </param>
            </when>
            <when value="geneList">
              <param type="data" name="geneListFile" label="List of genes to keep" multiple="false" help="Gene names should be the same as written in expression file"/>
            </when>
          </conditional>
        </when>
      </conditional>

    </when>
    
    <when value="foldChange">

        <param type="data" name="differentialAnalysis" format="tabular" label="Differential analysis tabular file (as given by LIMMA diff.exp. tool)" optional="false" multiple="false">
        </param>

        <param name="comparisonsToInclude" type="select" optional="false" multiple="true" label="Select comparisons to cluster" refresh_on_change="true"  dynamic_options="get_column_names_filteredList(dataToCluster['differentialAnalysis'].file_name,[0,1],4)">
                 <validator type="empty_field" message="You should specify one factor"></validator>
        </param>

        <conditional name="filtering_step">
          <param name="filtering_step_selector" type="select" label="Probes/genes filtering">
              <option value="no" selected="True">No filtering</option>
              <option value="input">Filter input probes/genes before clustering</option>
              <option value="output">Filter probes/genes only in tabular output file</option>
          </param>
          <when value="input">
            <conditional name="select_filtering">
              <param name="filtering_stepBis_selector" type="select" label="Filter">
                <option value="diffExpParam" selected="True">Based on diff. exp. parameters (FC and p-val)</option>
                <option value="geneList">From list of genes</option>
              </param>
              <when value="diffExpParam">
                <param name="FCthreshold" type="float" value="2" label="Fold change threshold for input (both 'threshold' and '1/threshold' values will be used)" help="Minimum value is 1 (ie. all probes/genes are kept)" >
                  <validator type="in_range" min="1" exclude_min="False" message="FC threshold should be greater than 1"/>
                </param>
                <param name="pvalThreshold" type="float" value="0.05" label="FDR p-val threshold for input" help="When several comparisons are selected a conservative rule is applied (see details below)" >
                  <validator type="in_range" min="0" max="1" message="Threshold should be between 0 and 1"/>
                </param>
              </when>
              <when value="geneList">
               <param type="data" name="geneListFile" label="List of genes to keep" multiple="false" help="Gene names should be the same as written in diff. exp. analysis file"/>
              </when>
            </conditional>
          </when>
          
          <when value="output">
            <conditional name="select_filtering">
              <param name="filtering_stepBis_selector" type="select" label="Filter">
                <option value="diffExpParam" selected="True">Based on diff. exp. parameters (FC and p-val)</option>
                <option value="geneList">From list of genes</option>
              </param>
              <when value="diffExpParam">
                <param name="FCthreshold" type="float" value="2" label="Fold change threshold for output (both 'threshold' and '1/threshold' values will be used)" help="Minimum value is 1 (ie. all probes/genes are kept)">
                   <validator type="in_range" min="1" exclude_min="False" message="Threshold should be greater than 1"/>
                </param>
                <param name="pvalThreshold" type="float" value="0.05" label="FDR p-val threshold for output" help="When several comparisons are selected a conservative rule is applied (see details below)">
                      <validator type="in_range" min="0" max="1" message="Threshold should be between 0 and 1"/>
                </param>
              </when>
              <when value="geneList">
                <param type="data" name="geneListFile" label="List of genes to keep" multiple="false" help="Gene names should be the same as written in diff. exp. analysis file"/>
              </when>
            </conditional>
          </when>
        </conditional>

    </when>
  </conditional>

	<section name="advSection" title="Advanced parameters" expanded="False">

    <param name="clusterNumber" type="integer" value="5" label="Requested cluster number" help="Use scree plot to adjust number of clusters">
      <validator type="in_range" min="2" message="Cluster number should be greater than 1"/>
    </param>

    <param type="boolean" name="clusterConditions" checked="true" label="Cluster samples" help="To apply hierarchical clustering to samples">
    </param>

    <param name="maxSampleToPlot" type="integer" value="1000" label="Max gene/probe number to plot" help="For readability and running time, the number of displayed rows can be limited, clustering is still done for all rows but plots are made from a random selection.">
      <validator type="in_range" min="2" message="The number should be greater than 1"/>
    </param>

    <conditional name="select_color">
      <param type="boolean" name="specifyColors" checked="false" label="Personalized colors">
      </param>
      <when value="true">
        <param name="featureMin_color" type="color" label="Min value color" value="#ff00ff">
        </param>

        <param name="featureMedium_color" type="color" label="Medium value color" value="#4455ff">
        </param>

        <param name="featureMax_color" type="color" label="Max value color" value="#00ffff">
        </param>
      </when>
    </conditional>

    <param type="select" name="imageFormat" display="radio" label="Output image format">
      <option value="png">PNG format</option>
      <option value="pdf">PDF format</option>
    </param>
    <param type="select" name="imagePlotlyFormat" display="radio" label="Html snapshot format">
      <option value="png">PNG format</option>
      <option value="svg">SVG format</option>
    </param>
  </section>

</inputs>


  <outputs>
    <data format="tabular" name="outputData" label="${title}_ClusteringResults"/>
	
    <data format="html" name="html_file" label="${title}_HTML.html"/>
    <!--
    <collection name="outputHeatmap" label="${title}_Heatmap" type="list">
      <discover_datasets pattern="(?P&lt;designation&gt;Heatmap.*)\.(?P&lt;ext&gt;[^\._]+)?" directory="plotDir" visible="false"/>
      <discover_datasets pattern="(?P&lt;designation&gt;screePlot.*)\.(?P&lt;ext&gt;[^\._]+)?" directory="plotDir" visible="false"/>
      <discover_datasets pattern="(?P&lt;designation&gt;circularPlot.*)\.(?P&lt;ext&gt;[^\._]+)?" directory="plotDir" visible="false"/>
    </collection>
	   -->
    <data format="txt" name="log" label="${title}_Log" />
  </outputs>

  <configfiles>

    <configfile name="scriptTableToHtml">
<![CDATA[
printf  "<!DOCTYPE html>
<html>
<head>
<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\">
<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.datatables.net/1.10.16/css/jquery.dataTables.min.css\">
<script type=\"text/javascript\" language=\"javascript\" src=\"https://code.jquery.com/jquery-1.12.4.js\">
</script>
<script type=\"text/javascript\" language=\"javascript\" src=\"https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js\">
</script>
<script type=\"text/javascript\" class=\"init\">
\\$(document).ready(function() {
	\\$(\'\#example\').DataTable( {
        \"columnDefs\": [ {
            \"visible\": false,
            \"targets\": -1
        } ]
    } );
} );
</script>
</head>
<body style=\"background-color:white;\">
<table id=\"example\" class=\"display\" cellspacing=\"0\">
" > ${html_file.extra_files_path}/outputClustering.html

printf "<colgroup>\n" >> ${html_file.extra_files_path}/outputClustering.html
printf "<col span=\"2\" style=\"background-color:rgb(224,235,235)\">\n" >> ${html_file.extra_files_path}/outputClustering.html
printf "<col span=\"1\" style=\"background-color:rgb(250,235,235)\">\n" >> ${html_file.extra_files_path}/outputClustering.html
awk 'BEGIN{odd=1;FS="\t"} NR==1{for(i=4;i<=NF;i=i+4){if(odd==1){odd=0;printf "<col span=\"4\" style=\"background-color:rgb(224,238,255)\">\n"}else{odd=1;printf "<col span=\"4\" style=\"background-color:rgb(255,221,224)\">\n"}}}' $outputData >> ${html_file.extra_files_path}/outputClustering.html
printf "</colgroup>\n" >> ${html_file.extra_files_path}/outputClustering.html
printf "<thead>\n<tr>\n" >> ${html_file.extra_files_path}/outputClustering.html

#if $dataToCluster.dataToCluster_selector=="expression" and ($dataToCluster.filtering_step.filtering_step_selector=="no" or ($dataToCluster.filtering_step.filtering_step_selector!="no" and $dataToCluster.filtering_step.select_filtering.filtering_stepBis_selector=="geneList")):
printf "<th rowspan=\"1\">Gene</th>\n" >> ${html_file.extra_files_path}/outputClustering.html
printf "<th rowspan=\"1\">Cluster</th>\n" >> ${html_file.extra_files_path}/outputClustering.html
#else
printf "<th rowspan=\"2\">Gene</th>\n" >> ${html_file.extra_files_path}/outputClustering.html
printf "<th rowspan=\"2\">Info</th>\n" >> ${html_file.extra_files_path}/outputClustering.html
printf "<th rowspan=\"2\">Cluster</th>\n" >> ${html_file.extra_files_path}/outputClustering.html
awk 'BEGIN{FS="\t"} NR==1{for(i=4;i<=NF;i=i+4)printf "<th colspan=\"4\">"\$i"</th>\n"}' $outputData >> ${html_file.extra_files_path}/outputClustering.html
printf "<th></th>\n" >> ${html_file.extra_files_path}/outputClustering.html
printf "</tr>\n<tr>\n" >> ${html_file.extra_files_path}/outputClustering.html
awk 'BEGIN{FS="\t"} NR==2{for(i=4;i<=NF;i++)printf "<th>"\$i"</th>\n"}' $outputData >> ${html_file.extra_files_path}/outputClustering.html
#end if

printf "<th></th>\n" >> ${html_file.extra_files_path}/outputClustering.html
printf "</tr>\n</thead>\n" >> ${html_file.extra_files_path}/outputClustering.html
printf "<tfoot>\n<tr>\n" >> ${html_file.extra_files_path}/outputClustering.html

#if $dataToCluster.dataToCluster_selector=="expression" and ($dataToCluster.filtering_step.filtering_step_selector=="no" or ($dataToCluster.filtering_step.filtering_step_selector!="no" and $dataToCluster.filtering_step.select_filtering.filtering_stepBis_selector=="geneList")):
awk 'BEGIN{FS="\t"} NR==1{for(i=1;i<=NF;i++)printf "<th>"\$i"</th>\n"}' $outputData >> ${html_file.extra_files_path}/outputClustering.html
#else
awk 'BEGIN{FS="\t"} NR==2{for(i=1;i<=NF;i++)printf "<th>"\$i"</th>\n"}' $outputData >> ${html_file.extra_files_path}/outputClustering.html
#end if

printf "<th></th>\n" >> ${html_file.extra_files_path}/outputClustering.html
printf "</tr>\n</tfoot>\n">> ${html_file.extra_files_path}/outputClustering.html
printf "<tbody>\n" >> ${html_file.extra_files_path}/outputClustering.html

#if $dataToCluster.dataToCluster_selector=="expression" and ($dataToCluster.filtering_step.filtering_step_selector=="no" or ($dataToCluster.filtering_step.filtering_step_selector!="no" and $dataToCluster.filtering_step.select_filtering.filtering_stepBis_selector=="geneList")):
awk 'BEGIN{FS="\t"} NR>1{printf "<tr>\n";for(i=1;i<=NF;i++){printf "<th>"\$i"</th>\n"};printf "<th></th>\n";printf "</tr>\n"}' $outputData >> ${html_file.extra_files_path}/outputClustering.html
#else
awk 'BEGIN{FS="\t"} NR>2{printf "<tr>\n";for(i=1;i<=NF;i++){printf "<th>"\$i"</th>\n"};printf "<th></th>\n";printf "</tr>\n"}' $outputData >> ${html_file.extra_files_path}/outputClustering.html
#end if

printf "</tbody>\n" >> ${html_file.extra_files_path}/outputClustering.html

printf "</table>
</body>
</html>" >> ${html_file.extra_files_path}/outputClustering.html

]]>
  </configfile>
  
  
    <configfile name="scriptTransfer">
<![CDATA[
mkdir /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name} 2>/dev/null
mkdir /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-$title

cp $outputData /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-${title}/ClusteringResult.${outputData.ext}
ln -s -f /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-${title}/ClusteringResult.${outputData.ext} $outputData


mkdir -p $html_file.extra_files_path


##create HTML file for clustering output table
source $scriptTableToHtml
cp ${html_file.extra_files_path}/outputClustering.html /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-${title}/Clustering_result.html

#write header of html file
printf  "<!DOCTYPE html>\n<html>\n<body>"  > $html_file


##first add reference of the clustering output table
printf "<h3>Clustering tabular</h3>\n" >> $html_file
printf "<a href=\"outputClustering.html\">Clustering results</a>\n"  >> $html_file




##manage heatmap file


if [ -e ./plotDir/Heatmap.${advSection.imageFormat} ]; then
cp ./plotDir/Heatmap.${advSection.imageFormat} /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-${title}/Heatmap.${advSection.imageFormat}

printf "<h3>Heatmap plot</h3>\n" >> $html_file

##modify HTML to point to the first script folder
sed -i "s/Heatmap_files/PlotLy_Heatmap_scripts/g" ./plotLyDir/Heatmap.html

##copy HTML files in both folders
cp ./plotLyDir/Heatmap.html /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-${title}/Heatmap.html
cp ./plotLyDir/Heatmap.html ${html_file.extra_files_path}/Heatmap.html

##add HTML link
printf "<a href=\"Heatmap.html\">Heatmap</a>\n"  >> $html_file

#if $advSection.imagePlotlyFormat=="svg":
##before copying scripts folder modify them to replace png snapshot with svg (not proud of solution but seems to work)
cd ./plotLyDir/Heatmap_files/plotlyjs-*/
awk '{gsub("e=\"png\"","e=\"svg\"",\$0);print \$0}' ./plotly-latest.min.js > ./plotly-latest.minTemp.js
awk '{gsub("Download plot as a png","Download plot as a svg",\$0);print \$0}' ./plotly-latest.minTemp.js > ./plotly-latest.min.js
rm ./plotly-latest.minTemp.js
cd ../../../
#end if

##now copy scripts folder
cp -r ./plotLyDir/Heatmap_files /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-${title}
mv /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-${title}/Heatmap_files /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-${title}/PlotLy_Heatmap_scripts
cp -r ./plotLyDir/Heatmap_files $html_file.extra_files_path
mv ${html_file.extra_files_path}/Heatmap_files ${html_file.extra_files_path}/PlotLy_Heatmap_scripts

fi




##manage screePlot files


if [ -e ./plotDir/screePlot.${advSection.imageFormat} ]; then
cp ./plotDir/screePlot.${advSection.imageFormat} /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-${title}/screePlot.${advSection.imageFormat}

printf "<h3>Scree plot</h3>\n" >> $html_file

##modify HTML to point to the first script folder
sed -i "s/screePlot_files/PlotLy_screePlot_scripts/g" ./plotLyDir/screePlot.html

##copy HTML files in both folders
cp ./plotLyDir/screePlot.html /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-${title}/screePlot.html
cp ./plotLyDir/screePlot.html ${html_file.extra_files_path}/screePlot.html

##add HTML link
printf "<a href=\"screePlot.html\">Scree plot</a>\n"  >> $html_file

#if $advSection.imagePlotlyFormat=="svg":
##before copying scripts folder modify them to replace png snapshot with svg (not proud of solution but seems to work)
cd ./plotLyDir/screePlot_files/plotlyjs-*/
awk '{gsub("e=\"png\"","e=\"svg\"",\$0);print \$0}' ./plotly-latest.min.js > ./plotly-latest.minTemp.js
awk '{gsub("Download plot as a png","Download plot as a svg",\$0);print \$0}' ./plotly-latest.minTemp.js > ./plotly-latest.min.js
rm ./plotly-latest.minTemp.js
cd ../../../
#end if

##now copy scripts folder
cp -r ./plotLyDir/screePlot_files /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-${title}
mv /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-${title}/screePlot_files /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-${title}/PlotLy_screePlot_scripts
cp -r ./plotLyDir/screePlot_files $html_file.extra_files_path
mv ${html_file.extra_files_path}/screePlot_files ${html_file.extra_files_path}/PlotLy_screePlot_scripts

fi


##manage circular files


if [ -e ./plotDir/circularPlot.${advSection.imageFormat} ]; then
cp ./plotDir/circularPlot.${advSection.imageFormat} /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-${title}/circularPlot.${advSection.imageFormat}

cp ./plotDir/circularPlot.${advSection.imageFormat} ${html_file.extra_files_path}/circularPlot.${advSection.imageFormat}

printf "<h3>Circular plot</h3>\n" >> $html_file

##add HTML link
printf "<a href=\"circularPlot.${advSection.imageFormat}\">Circular plot</a>\n"  >> $html_file
fi



##create footer of HTML file
printf  "</body>\n</html>" >> $html_file


cp $log /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-${title}/Log.${log.ext}
ln -s -f /media/NasShared/Galaxy_Outputs/$userEmail/${log.history_id}-${log.history.name}/${log.hid}-${title}/Log.${log.ext} $log
]]>
   </configfile>
  </configfiles>
  
 <tests>
  <test maxseconds="3600" name="CEAS_1">
    <param name="wfile" value="wiggle.wig" />
    <param name="bfile" value="bedfile.bed" />
    <param name="span" value="3000" />
    <param name="pfres" value="50" />
    <param name="lowersize" value="1000" />
    <param name="middlesize" value="2000" />
    <param name="uppersize" value="3000" />
    <param name="lowerbisize" value="2500" />
    <param name="upperbisize" value="5000" />
    <param name="reldist" value="3000" />
    <param name="genome" value="hg18" />
    <param name="imagetype" value="PDF" />
    <param name="enable" value="no" />
    <output name="output" file="ceas_1/ceas_1.pdf" />
    <output name="output" file="ceas_1/ceas_1.log" lines_diff = "200" />
  </test>
</tests> 
  <help>
To draw heatmap from expression file or diff. analysis results.


.. class:: warningmark

**SANDBOX TOOL**

-----

**Parameters**

- **normalized expression tabular file** with samples as columns and genes as rows (header row contains sample names and first column gene identifiers). First lines following header line should contain factor informations matching comparison requested.
- **differential analysis tabular file** with comparisons as colums with (p-val, FDR p-val and FC fields) and genes as rows (first and second rows contain comparison names and first column gene identifiers).

-----

**Outputs**
- **Heatmap** when number of gene to display in heatmap exceed 1.000, random sampling is done for plotting efficiency, in this case clustering displayed may differ from clustering information contained in table as heatmap clustering is done over 1.000 samples maximum whereas a global clustering is done for table content

- **LOG file** for job log. If you see errors, please attached this in the bug report

  </help>

</tool>
